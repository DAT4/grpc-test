// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mygrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DoorServiceClient is the client API for DoorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoorServiceClient interface {
	Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*Token, error)
	OpenDoor(ctx context.Context, opts ...grpc.CallOption) (DoorService_OpenDoorClient, error)
}

type doorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDoorServiceClient(cc grpc.ClientConnInterface) DoorServiceClient {
	return &doorServiceClient{cc}
}

func (c *doorServiceClient) Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/mygrpc.DoorService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doorServiceClient) OpenDoor(ctx context.Context, opts ...grpc.CallOption) (DoorService_OpenDoorClient, error) {
	stream, err := c.cc.NewStream(ctx, &DoorService_ServiceDesc.Streams[0], "/mygrpc.DoorService/OpenDoor", opts...)
	if err != nil {
		return nil, err
	}
	x := &doorServiceOpenDoorClient{stream}
	return x, nil
}

type DoorService_OpenDoorClient interface {
	Send(*Door) error
	CloseAndRecv() (*DoorResponse, error)
	grpc.ClientStream
}

type doorServiceOpenDoorClient struct {
	grpc.ClientStream
}

func (x *doorServiceOpenDoorClient) Send(m *Door) error {
	return x.ClientStream.SendMsg(m)
}

func (x *doorServiceOpenDoorClient) CloseAndRecv() (*DoorResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DoorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DoorServiceServer is the server API for DoorService service.
// All implementations must embed UnimplementedDoorServiceServer
// for forward compatibility
type DoorServiceServer interface {
	Login(context.Context, *User) (*Token, error)
	OpenDoor(DoorService_OpenDoorServer) error
	mustEmbedUnimplementedDoorServiceServer()
}

// UnimplementedDoorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDoorServiceServer struct {
}

func (UnimplementedDoorServiceServer) Login(context.Context, *User) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedDoorServiceServer) OpenDoor(DoorService_OpenDoorServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenDoor not implemented")
}
func (UnimplementedDoorServiceServer) mustEmbedUnimplementedDoorServiceServer() {}

// UnsafeDoorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoorServiceServer will
// result in compilation errors.
type UnsafeDoorServiceServer interface {
	mustEmbedUnimplementedDoorServiceServer()
}

func RegisterDoorServiceServer(s grpc.ServiceRegistrar, srv DoorServiceServer) {
	s.RegisterService(&DoorService_ServiceDesc, srv)
}

func _DoorService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoorServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mygrpc.DoorService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoorServiceServer).Login(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoorService_OpenDoor_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DoorServiceServer).OpenDoor(&doorServiceOpenDoorServer{stream})
}

type DoorService_OpenDoorServer interface {
	SendAndClose(*DoorResponse) error
	Recv() (*Door, error)
	grpc.ServerStream
}

type doorServiceOpenDoorServer struct {
	grpc.ServerStream
}

func (x *doorServiceOpenDoorServer) SendAndClose(m *DoorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *doorServiceOpenDoorServer) Recv() (*Door, error) {
	m := new(Door)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DoorService_ServiceDesc is the grpc.ServiceDesc for DoorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mygrpc.DoorService",
	HandlerType: (*DoorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _DoorService_Login_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenDoor",
			Handler:       _DoorService_OpenDoor_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "mygrpc/my_grpc.proto",
}
